{"prompt": "Review this code and provide feedback: \n```python\ndef is_even(n):\n    return n % 2 == 0\n```", "completion": "```python\n# Review:\n# 1. Function correctly checks if a number is even.\n# 2. Add type hints for better readability.\n# 3. Function is simple and efficient.\n# 4. No additional improvements necessary.\n\ndef is_even(n: int) -> bool:\n    return n % 2 == 0\n```"}
{"prompt": "Review this code and provide feedback: \n```python\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n```", "completion": "```python\n# Review:\n# 1. Function correctly calculates the greatest common divisor using Euclidean algorithm.\n# 2. Add type hints for better readability.\n# 3. Function is simple and efficient.\n# 4. No additional improvements necessary.\n\ndef gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n```"}
{"prompt": "Review this code and provide feedback: \n```python\ndef count_vowels(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n```", "completion": "```python\n# Review:\n# 1. Function correctly counts vowels in a string.\n# 2. Consider using a set for vowels for better performance.\n# 3. Add type hints for better readability.\n# 4. Add a docstring explaining the function.\n\ndef count_vowels(s: str) -> int:\n    \"\"\"\n    Counts the number of vowels in a string.\n    Args:\n        s (str): Input string.\n    Returns:\n        int: Number of vowels in the string.\n    \"\"\"\n    count = 0\n    vowels = set('aeiouAEIOU')\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n```"}
{"prompt": "Review this code and provide feedback: \n```python\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n    return arr\n```", "completion": "```python\n# Review:\n# 1. Function correctly implements merge sort algorithm.\n# 2. Add type hints for better readability.\n# 3. Consider adding a helper function for merging to improve readability.\n# 4. Add a docstring explaining the function.\n\ndef merge_sort(arr: list[int]) -> list[int]:\n    \"\"\"\n    Sorts a list using merge sort algorithm.\n    Args:\n        arr (list[int]): List of integers to be sorted.\n    Returns:\n        list[int]: Sorted list.\n    \"\"\"\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n    return arr\n```"}
